
import {aggregateX, getEntityCollection} from '../molgenisApi'
import 'url-polyfill'
import {SET_BIOBANKS, SET_FILTER, SET_AGGS, SET_ATTRIBUTE_CHARTS, RESET_FILTERS} from './mutations'
import {biobankGraphRsql, attributeGraphRsql} from './getters'
import {zip} from 'ramda'

/** @const {string} */
export const GET_BIOBANKS = 'GET_BIOBANKS'
/** @const {string} */
export const SET_BIOBANK = 'SET_BIOBANK'
/** @const {string} */
export const SET_FILTER_ASYNC = 'SET_FILTER_ASYNC'
/** @const {string} */
export const RESET_FILTERS_ASYNC = 'RESET_FILTERS_ASYNC'
/** @const {string} */
export const REFRESH_GRAPH = 'REFRESH_GRAPH'
/** @const {string} */
export const REFRESH_ATTRIBUTE_GRAPHS = 'REFRESH_ATTRIBUTE_GRAPHS'

/**
 * More stuff generated by the ide, but what does is all mean...
 * @param aggs
 * @returns {{values}}
 */
const matrixValues = aggs => {
  const zipped = zip(aggs.xLabels, aggs.matrix.map(row => row[0]))
  const values = zipped.reduce((acc, val) => ({...acc, [val[0]]: val[1]}), {})
  return { values }
}

/**
 * @typedef {object} Entity~actions
 * @property {String} biobanks
 * @property {String} samples
 */

/**
 * @typedef {object} Biobank
 * @property {string} is
 * @property {string} abbr
 */

/**
 * @typedef {object} Column
 * @property {string} key
 * @property {string} label
 * @property {string} type
 */

/**
 * @typedef {object} Row
 * @property {string} label
 */

/**
 * @typedef {object} Chart
 * @property {Column[]} columns
 * @property {Row[]} rows
 * @property {string} title
 */

/**
 * @typedef State
 * @type {object}
 * @property {Entity} entities
 * @property {number} numberOfSamples
 * @property {boolean} transcriptome
 * @property {boolean} methylome
 * @property {boolean} genotypes
 * @property {boolean} wbcc
 * @property {boolean} metabolome
 * @property {boolean} wgs
 * @property {boolean} male
 * @property {boolean} female
 * @property {boolean} smoking
 * @property {boolean} nonSmoking
 * @property {boolean} belowTwenty
 * @property {boolean} twentyThirty
 * @property {boolean} thirtyFourty
 * @property {boolean} fourtyFifty
 * @property {boolean} fiftySixty
 * @property {boolean} sixtySeventy
 * @property {boolean} seventyEighty
 * @property {boolean} aboveEigthy
 * @property {string} [biobank]
 * @property {Array} aggs
 * @property {Biobank[]} biobanks
 * @property {Charts} [charts]
 * @property {string} apiUrl
 * @property {string} [token]
 */

/**
 * @typedef {object} ActionParam
 * @property {function} commit
 * @property {function} dispatch
 * @property {State} state
 */

export default {
  /**
   * This method does something
   * @param {ActionParam} params
   */
  [GET_BIOBANKS] (params) {
    const {commit, state: {token, apiUrl, entities: {biobanks}}} = params
    getEntityCollection(apiUrl, biobanks, token)
      .then(response => { commit(SET_BIOBANKS, response.items) })
  },
  /**
   * This method does other things, like setting things
   * @param {ActionParam} params
   * @param {Biobank} biobank
   */
  [SET_BIOBANK] (params, biobank) {
  //  let foo = params.dispatch2  the ide will warm about the non existent dispatch2
    const {commit, dispatch} = params
    commit(SET_FILTER, {name: 'biobank', value: biobank})
    dispatch(REFRESH_ATTRIBUTE_GRAPHS)
  },
  [SET_FILTER_ASYNC] (params, filter: {name: string, value: any}) {
    const {commit, dispatch} = params
    commit(SET_FILTER, filter)
    dispatch(REFRESH_GRAPH)
    dispatch(REFRESH_ATTRIBUTE_GRAPHS)
  },
  [RESET_FILTERS_ASYNC] (params) {
    const {commit, dispatch} = params
    commit(RESET_FILTERS)
    dispatch(REFRESH_GRAPH)
    dispatch(REFRESH_ATTRIBUTE_GRAPHS)
  },
  [REFRESH_GRAPH] (params) {
    const {commit, state} = params
    const {token, apiUrl, entities: {samples}} = state
    const rsql = biobankGraphRsql(state)
    console.log('rsql', rsql)
    aggregateX(apiUrl, samples, 'biobank', rsql, token)
      .then(response => { commit(SET_AGGS, response.aggs) })
  },
  [REFRESH_ATTRIBUTE_GRAPHS] (params) {
    const {commit, state} = params
    const {token, apiUrl, entities: {samples}} = state
    commit(SET_ATTRIBUTE_CHARTS, [])
    const rsql = attributeGraphRsql(state)
    const attributes = ['smoking', 'sex', 'transcriptome', 'wbcc', 'genotypes', 'metabolome', 'methylome', 'wgs', 'ageGroup']
    const promises = attributes.map(attr => aggregateX(apiUrl, samples, attr, rsql, token))
    Promise.all(promises).then(
      responses => {
        /**
         * n.b. the line below is generated by the IDE, but waht does it all mean, we could really use some jsdoc here
         * @type {{data_types: {title: string, columns: [*], rows: [*]}, age: {title: string, columns: [*], rows: [*]}, smoking: {title: string, columns: [*], rows: [*]}, gender: {title: string, columns: [*], rows: [*]}}}
         */
        const attributeGraphs = {
          'data_types': {
            title: 'Data types',
            columns: [
              {type: 'number', label: 'Available', key: 'T'},
              {type: 'number', label: 'Unavailable', key: 'F'}
            ],
            rows: [
              {label: 'transcriptome', ...matrixValues(responses[2].aggs)},
              {label: 'wbcc', ...matrixValues(responses[3].aggs)},
              {label: 'genotypes', ...matrixValues(responses[4].aggs)},
              {label: 'metabolome', ...matrixValues(responses[5].aggs)},
              {label: 'methylome', ...matrixValues(responses[6].aggs)},
              {label: 'wgs', ...matrixValues(responses[7].aggs)}
            ]
          },
          'age': {
            title: 'Age distribution',
            columns: [
              {type: 'number', label: '<20', key: '<20'},
              {type: 'number', label: '20-30', key: '20-30'},
              {type: 'number', label: '30-40', key: '30-40'},
              {type: 'number', label: '40-50', key: '40-50'},
              {type: 'number', label: '50-60', key: '50-60'},
              {type: 'number', label: '60-70', key: '60-70'},
              {type: 'number', label: '70-80', key: '70-80'},
              {type: 'number', label: '>80', key: '>80'},
              {type: 'number', label: 'Unknown', key: 'null'}
            ],
            rows: [
              {label: 'Age', ...matrixValues(responses[8].aggs)}
            ]
          },
          'smoking': {
            title: 'Smoking data',
            columns: [
              {type: 'number', label: 'Available', key: 'T'},
              {type: 'number', label: 'Not available', key: 'F'},
              {type: 'number', label: 'Unknown', key: 'null'}
            ],
            rows: [
              {label: 'Smoking data', ...matrixValues(responses[0].aggs)}
            ]
          },
          'gender': {
            title: 'Sex',
            columns: [
              {type: 'number', label: 'Male', key: 'male'},
              {type: 'number', label: 'Female', key: 'female'},
              {type: 'number', label: 'Unknown', key: 'null'}
            ],
            rows: [
              {label: 'Sex', ...matrixValues(responses[1].aggs)}
            ]
          }
        }
        commit(SET_ATTRIBUTE_CHARTS, attributeGraphs)
      }
    )
  }
}
